#! /bin/bash

#Exit on errors
set -e

# Run like this:
# qsub -N ..... ./1_train_start

echo 
echo "Beginning training."
echo "  Script:      `basename $0`"
echo "  Date:        `date`"
echo "  Hostname:    `hostname`"
echo "  PBS_GPUFILE: $PBS_GPUFILE"
if [ "$PBS_GPUFILE" = "" ]; then
    echo "  --> WARNING: No PBS_GPUFILE, so we're not sure which GPU to use. Trying default."
else
    ls $PBS_GPUFILE >/dev/null || echo "Error: PBS_GPUFILE $PBS_GPUFILE not found."
    gpustring=`cat $PBS_GPUFILE`
    gpunum=`echo $gpustring | egrep -o 'gpu[0-9]' | egrep -o [0-9]`
    if [ "$gpunum" = "" ]; then
        echo "Error: gpunum is blank"
        exit 1
    fi
    export CUDA_VISIBLE_DEVICES=$gpunum
    echo "  GPU String:  $gpustring"
    echo "  Using GPU:   $CUDA_VISIBLE_DEVICES"
fi
echo "  nvidia-smi:"
echo
nvidia-smi | sed 's/^/    /g'
echo
echo "  Files here:"
echo
ls -ralt | sed 's/^/    /g'
echo
echo "  Dataset sizes:"
echo
du -sh imagenet_train_leveldb imagenet_val_leveldb | sed 's/^/    /g'
echo
echo "  env:"
echo
env | sort | sed 's/^/    /g'
echo


# FIRST: Figure out if we're supposed to be fine-tuning or not:
finetune_base_net_file=`ls -v basenet/caffe_imagenet_train_iter_*[0-9] 2>/dev/null | tail -n 1`  # Take latest previous, even iter_0
if [ "$finetune_base_net_file" = "" ]; then
    echo "Fine-tuning: We are not fine-tuning another network."
else
    echo "Fine-tuning: We are fine-tuning another network."
    echo "Fine-tuning: Base network file (only used if traing from scratch): $finetune_base_net_file"
fi

# SECOND: Figure out if we should resume or start fresh, regardless of whether we're fine-tuning or not
lastfile=`ls -v *solverstate 2>/dev/null | tail -n +2 | tail -n 1`  # don't take iter_0 snapshot though
if [ "$lastfile" = "" ]; then
    echo "Starting training from scratch"
else
    echo "Resuming training from file: $lastfile"
fi


try=1
set +e       # Don't exit immediately on errors
while : ; do
    echo "Attempt number: $try"
    echo "-------------------------------------------------"

    if [ "$finetune_base_net_file" = "" ]; then
        if [ "$lastfile" = "" ]; then
            echo "Fine-tuning: no. Resuming: no"
            set -x
            GLOG_logtostderr=1 time ./caffe.bin train --solver=imagenet_solver.prototxt 2>&1
            code="$?"
            set +x
        else
            echo "Fine-tuning: no. Resuming: yes"
            set -x
            GLOG_logtostderr=1 time ./caffe.bin train --solver=imagenet_solver.prototxt --snapshot=$lastfile 2>&1
            code="$?"
            set +x
        fi
    else
        if [ "$lastfile" = "" ]; then
            echo "Fine-tuning: yes. Resuming: no"
            set -x
            GLOG_logtostderr=1 time ./caffe.bin train --solver=imagenet_solver.prototxt --weights=caffe_imagenet_train_iter_0 2>&1
            code="$?"
            set +x
        else
            echo "Fine-tuning: yes. Resuming: yes"
            # In this case we use --snapshot instead of --weights
            # because we're resuming a previous fine-tune run, so we
            # just need the *.solverstate file
            set -x
            GLOG_logtostderr=1 time ./caffe.bin train --solver=imagenet_solver.prototxt --snapshot=$lastfile 2>&1
            code="$?"
            set +x
        fi
    fi

    [ "$code" = "0" ] && break
    timeout=$(($try*5))
    echo "Failed with code $code, sleeping for $timeout..."
    sleep $timeout
    echo 
    echo
    if [ "$try" = "10" ]; then
        subj="Failed $try times at job `cat jobname`"
        ssh mmmlog3 mailj "$subj"
        echo "Sent mail; giving up"
        break
    fi
    try=$((try+1))
done


echo "-------------------------------------------------"
echo "Finished (last exit code: $code)."


subj="Job `cat jobname` finished with exit code $code"
ssh mmmlog3 mailj "$subj"
echo "Sent mail; done."
